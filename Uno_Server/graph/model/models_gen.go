// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Card struct {
	ID       string   `json:"id"`
	Number   string   `json:"number"`
	Color    Color    `json:"color"`
	CardType CardType `json:"cardType"`
}

type Player struct {
	Name      string `json:"name"`
	CardCount int    `json:"cardCount"`
}

type PlayerState struct {
	Topcard       *Card     `json:"topcard"`
	LastNumber    int       `json:"lastNumber"`
	LastColor     Color     `json:"lastColor"`
	Players       []*Player `json:"players"`
	Cards         []*Card   `json:"cards"`
	CurrentPlayer string    `json:"currentPlayer"`
	GameDirection Direction `json:"gameDirection"`
	Validmoves    []*Card   `json:"validmoves"`
	PickCount     int       `json:"pickCount"`
	RequireChoose bool      `json:"requireChoose"`
}

type Room struct {
	ID      string       `json:"id"`
	Players []*Player    `json:"players"`
	State   *PlayerState `json:"state"`
	Winner  *Player      `json:"winner"`
}

type CardType string

const (
	CardTypeNumberCard       CardType = "NUMBER_CARD"
	CardTypeReverseCard      CardType = "REVERSE_CARD"
	CardTypeSkipCard         CardType = "SKIP_CARD"
	CardTypeDrawTwoCard      CardType = "DRAW_TWO_CARD"
	CardTypeWildCard         CardType = "WILD_CARD"
	CardTypeWildDrawFourCard CardType = "WILD_DRAW_FOUR_CARD"
)

var AllCardType = []CardType{
	CardTypeNumberCard,
	CardTypeReverseCard,
	CardTypeSkipCard,
	CardTypeDrawTwoCard,
	CardTypeWildCard,
	CardTypeWildDrawFourCard,
}

func (e CardType) IsValid() bool {
	switch e {
	case CardTypeNumberCard, CardTypeReverseCard, CardTypeSkipCard, CardTypeDrawTwoCard, CardTypeWildCard, CardTypeWildDrawFourCard:
		return true
	}
	return false
}

func (e CardType) String() string {
	return string(e)
}

func (e *CardType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CardType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CardType", str)
	}
	return nil
}

func (e CardType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Color string

const (
	ColorRed    Color = "RED"
	ColorBlue   Color = "BLUE"
	ColorYellow Color = "YELLOW"
	ColorGreen  Color = "GREEN"
	ColorBlack  Color = "BLACK"
)

var AllColor = []Color{
	ColorRed,
	ColorBlue,
	ColorYellow,
	ColorGreen,
	ColorBlack,
}

func (e Color) IsValid() bool {
	switch e {
	case ColorRed, ColorBlue, ColorYellow, ColorGreen, ColorBlack:
		return true
	}
	return false
}

func (e Color) String() string {
	return string(e)
}

func (e *Color) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Color(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Color", str)
	}
	return nil
}

func (e Color) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Direction string

const (
	DirectionForward  Direction = "FORWARD"
	DirectionBackward Direction = "BACKWARD"
)

var AllDirection = []Direction{
	DirectionForward,
	DirectionBackward,
}

func (e Direction) IsValid() bool {
	switch e {
	case DirectionForward, DirectionBackward:
		return true
	}
	return false
}

func (e Direction) String() string {
	return string(e)
}

func (e *Direction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Direction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Direction", str)
	}
	return nil
}

func (e Direction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
